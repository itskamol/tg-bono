import { Scene, SceneEnter, Action, Ctx } from 'nestjs-telegraf';
import { Markup } from 'telegraf';
import { PrismaService } from '../../prisma/prisma.service';
import { Context } from '../../interfaces/context.interface';

@Scene('delete-product-scene')
export class DeleteProductScene {
    constructor(private readonly prisma: PrismaService) {}

    @SceneEnter()
    async onSceneEnter(@Ctx() ctx: Context) {
        const products = await this.prisma.product.findMany({
            orderBy: [{ type: 'asc' }, { name: 'asc' }],
        });

        if (products.length === 0) {
            await ctx.reply("‚ùå O'chiriladigan mahsulotlar topilmadi.");
            await ctx.scene.leave();
            return;
        }

        const productButtons = products.map((product) =>
            Markup.button.callback(
                `${this.getTypeEmoji(product.type)} ${product.name} - ${product.price} so'm`,
                `DELETE_PRODUCT_${product.id}`,
            ),
        );

        await ctx.reply(
            "üóëÔ∏è Qaysi mahsulotni o'chirmoqchisiz?\n\n‚ö†Ô∏è Diqqat: Mahsulot o'chirilganda unga bog'liq buyurtmalar ham ta'sirlanishi mumkin!",
            Markup.inlineKeyboard([
                ...productButtons,
                Markup.button.callback('‚ùå Bekor qilish', 'CANCEL_DELETE_PRODUCT'),
            ]),
        );
    }

    @Action(/^DELETE_PRODUCT_(.+)$/)
    async onDeleteProductConfirm(@Ctx() ctx: Context) {
        const productData = (ctx.callbackQuery as any).data;
        const productId = productData.replace('DELETE_PRODUCT_', '');

        const product = await this.prisma.product.findUnique({
            where: { id: productId },
            include: {
                _count: {
                    select: { order_products: true },
                },
            },
        });

        if (!product) {
            await ctx.editMessageText('‚ùå Mahsulot topilmadi.');
            await ctx.scene.leave();
            return;
        }

        await ctx.editMessageText(
            `‚ö†Ô∏è Rostdan ham "${product.name}" mahsulotini o'chirmoqchimisiz?\n\n` +
                `üì¶ Turi: ${product.type}\n` +
                `üìù Nomi: ${product.name}\n` +
                `üçï Tomonlar: ${product.sides.join(', ')}\n` +
                `üí∞ Narxi: ${product.price} so'm\n` +
                `üìä Buyurtmalarda ishlatilgan: ${product._count.order_products} marta\n\n` +
                `‚ùóÔ∏è Bu amal qaytarib bo'lmaydi!`,
            Markup.inlineKeyboard([
                Markup.button.callback('‚úÖ Ha', `CONFIRM_DELETE_PRODUCT_${productId}`),
                Markup.button.callback("‚ùå Yo'q", 'CANCEL_DELETE_PRODUCT'),
            ]),
        );
    }

    @Action(/^CONFIRM_DELETE_PRODUCT_(.+)$/)
    async onConfirmDelete(@Ctx() ctx: Context) {
        const productData = (ctx.callbackQuery as any).data;
        const productId = productData.replace('CONFIRM_DELETE_PRODUCT_', '');

        try {
            const product = await this.prisma.product.findUnique({
                where: { id: productId },
            });

            if (!product) {
                await ctx.editMessageText('‚ùå Mahsulot topilmadi.');
                await ctx.scene.leave();
                return;
            }

            await this.prisma.product.delete({
                where: { id: productId },
            });

            await ctx.editMessageText(`‚úÖ "${product.name}" mahsuloti muvaffaqiyatli o'chirildi.`);
            await ctx.scene.leave();
        } catch (error) {
            await ctx.editMessageText(
                "‚ùå Mahsulotni o'chirishda xatolik yuz berdi. Bu mahsulot buyurtmalarda ishlatilgan bo'lishi mumkin.",
            );
            await ctx.scene.leave();
        }
    }

    @Action('CANCEL_DELETE_PRODUCT')
    async onCancelDelete(@Ctx() ctx: Context) {
        await ctx.editMessageText("‚ùå O'chirish bekor qilindi.");
        await ctx.scene.leave();
    }

    private getTypeEmoji(type: string): string {
        const emojis = {
            pizza: 'üçï',
            burger: 'üçî',
            drink: 'ü•§',
            dessert: 'üç∞',
            salad: 'ü•ó',
        };
        return emojis[type.toLowerCase()] || 'üì¶';
    }
}
